// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProjectBlogMvc.Models.DAL.Context;

namespace ProjectBlogMvc.Migrations
{
    [DbContext(typeof(ProjectContext))]
    partial class ProjectContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ProjectBlogMvc.Models.DATA.Entities.Article", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("HitRate")
                        .HasColumnType("int");

                    b.Property<string>("Picture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("ReadingTime")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("UserID");

                    b.ToTable("Articles");
                });

            modelBuilder.Entity("ProjectBlogMvc.Models.DATA.Entities.ArticlesTopics", b =>
                {
                    b.Property<int>("ArticleID")
                        .HasColumnType("int");

                    b.Property<int>("TopicID")
                        .HasColumnType("int");

                    b.HasKey("ArticleID", "TopicID");

                    b.HasIndex("TopicID");

                    b.ToTable("ArticlesTopics");
                });

            modelBuilder.Entity("ProjectBlogMvc.Models.DATA.Entities.FollowerFollowed", b =>
                {
                    b.Property<int>("FollowedID")
                        .HasColumnType("int");

                    b.Property<int>("FollowerID")
                        .HasColumnType("int");

                    b.HasKey("FollowedID", "FollowerID");

                    b.ToTable("FollowerFolloweds");
                });

            modelBuilder.Entity("ProjectBlogMvc.Models.DATA.Entities.Topic", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("HitRate")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Topics");
                });

            modelBuilder.Entity("ProjectBlogMvc.Models.DATA.Entities.User", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Bio")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("HitRate")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ProfilPicture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("URL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("ID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ProjectBlogMvc.Models.DATA.Entities.UsersArticles", b =>
                {
                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<int>("ArticleID")
                        .HasColumnType("int");

                    b.HasKey("UserID", "ArticleID");

                    b.ToTable("UsersArticles");
                });

            modelBuilder.Entity("ProjectBlogMvc.Models.DATA.Entities.UsersTopics", b =>
                {
                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<int>("TopicID")
                        .HasColumnType("int");

                    b.HasKey("UserID", "TopicID");

                    b.HasIndex("TopicID");

                    b.ToTable("UsersTopics");
                });

            modelBuilder.Entity("ProjectBlogMvc.Models.DATA.Entities.Article", b =>
                {
                    b.HasOne("ProjectBlogMvc.Models.DATA.Entities.User", "User")
                        .WithMany("Articles")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProjectBlogMvc.Models.DATA.Entities.ArticlesTopics", b =>
                {
                    b.HasOne("ProjectBlogMvc.Models.DATA.Entities.Article", "Article")
                        .WithMany("ArticlesTopics")
                        .HasForeignKey("ArticleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectBlogMvc.Models.DATA.Entities.Topic", "Topic")
                        .WithMany("ArticlesTopics")
                        .HasForeignKey("TopicID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("ProjectBlogMvc.Models.DATA.Entities.UsersTopics", b =>
                {
                    b.HasOne("ProjectBlogMvc.Models.DATA.Entities.Topic", "Topic")
                        .WithMany("UsersTopics")
                        .HasForeignKey("TopicID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectBlogMvc.Models.DATA.Entities.User", "User")
                        .WithMany("UsersTopics")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Topic");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProjectBlogMvc.Models.DATA.Entities.Article", b =>
                {
                    b.Navigation("ArticlesTopics");
                });

            modelBuilder.Entity("ProjectBlogMvc.Models.DATA.Entities.Topic", b =>
                {
                    b.Navigation("ArticlesTopics");

                    b.Navigation("UsersTopics");
                });

            modelBuilder.Entity("ProjectBlogMvc.Models.DATA.Entities.User", b =>
                {
                    b.Navigation("Articles");

                    b.Navigation("UsersTopics");
                });
#pragma warning restore 612, 618
        }
    }
}
